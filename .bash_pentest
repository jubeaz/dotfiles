alias revshell='shellerator'
alias fzf_wl="find /usr/share/seclists /usr/share/wordlists /usr/share/dirb -type f | fzf"
#alias fzf_wl="find /usr/share/seclists /usr/share/wordlists /usr/share/dirbuster /usr/share/wfuzz /usr/share/dirb -type f | fzf"
alias cme="crackmapexec"
alias proxychains="proxychains -q"
alias a="arsenal"
alias ssh-keygenz="ssh-keygen -t ed25519 -f"
alias smbserverz="smbserver.py -smb2support  pwn ./"

alias dirsearch="/usr/bin/dirsearch --config ~/.config/dirsearch/default.conf"
alias msfconsole="msfconsole -r ~/.msf4/msfconsole.rc"
alias nc="rlwrap nc"
alias ncat="rlwrap ncat"

alias gdb="gdb -q -ex init-pwndbg"
alias gdb-pwn="gdb -q -ex init-pwndbg"
alias gdb-gef="gdb -q -ex init-gef"
alias aslr-on="echo 2 | sudo tee /proc/sys/kernel/randomize_va_space"
alias aslr-off="echo 0 | sudo tee /proc/sys/kernel/randomize_va_space"
alias aslr-status="cat /proc/sys/kernel/randomize_va_space"

##
# pentesting commands
alias get-linpeas='__get_github_release carlospolop/PEASS-ng "(linpeas_linux_amd64|linpeas_linux_386|linpeas.sh)"'
alias get-pspy='__get_github_release DominicBreuker/pspy "s$"'
alias get-chisel='__get_github_release jpillora/chisel "linux_(386|amd64)"'

function masscanz() {
    sudo masscan -p1-65535,U:1-65535 $1 --rate=1000 -e tun0 --wait 5 > masscan.txt
}

alias gobusterz="gobuster dir -w /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt -u"

function ffuf-vhost(){
    if [[ $# -lt 1 ]] ; then
        echo 'invalid call: $0 url [wordlist [other_args]]'
        return
    fi
    argc=3
    if [[ $# -lt 2 ]] ; then
       argc=2 
    fi

    wl=${2:-/usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt}
    ffuf -H "Host: FUZZ.$1" -u http://$1 -w $wl ${@: $argc}
}

function nmapz() {
    PORTS=$(sudo nmap --min-rate=1000 -T4 -p- "$1" | grep '^[0-9]' | cut -d'/' -f 1 | tr '\n' ',' | sed s/',$'//) ;
    echo "TCP ports found: $PORTS";
    USER=$(whoami)
    sudo nmap -sVC -p$PORTS -oA nmap "$1";
    sudo chown $USER nmap.*
}

function nmapzu() {
    PORTS=$(sudo nmap -sU --min-rate=1000 -T4 -p- "$1" | grep '^[0-9]' | cut -d'/' -f 1 | tr '\n' ',' | sed s/',$'//) ;
    echo "Udp ports found: $PORTS";
    USER=$(whoami)
    sudo nmap -sUV -p$PORTS -oX nmap-u.xml "$1";
    sudo chown $USER nmap-u.xml
}


function __get_github_release(){
    repo=$1
    filter=$2
    basedir=${3:-.}
    mkdir -p $basedir
    files=$(curl -s https://api.github.com/repos/$repo/releases/latest | grep browser_download_url | cut -d '"' -f 4 | grep -E "$filter")
    #echo $files
    for i in $files ; do
        wget --quiet  --no-check-certificate $i -O $basedir/$(basename $i)
    done
}


function __set_active_symlink(){
    link=$1
    target=$2
    if [[ -L "$link" ]]; then
        rm -f $link
    else
        mv  $link "$link-save"
    fi
    ln -s $target $link
}

function __unset_active_symlink(){
    link=$1
    target=$2
    c_target=$(readlink -f $link)
#    echo "link $link"
#    echo "c_target $c_target"
#    echo $target
    if [[ "$c_target" == "$target" ]] ; then
        rm -f $link
        mv  "$link-save" $link
    fi
}
function pentest-activate(){
    PROJECT=${2:-$(pwd)}
    if [[ $# -ge 1 ]] ; then
        PROJECT="$PROJECT/$1"
    fi

    JOHN_LOGS="$PROJECT/evidence/logging/john"
    CME_LOGS="$PROJECT/evidence/logging/cme"
    JWT_TOOL_LOGS="$PROJECT/evidence/logging/jwt_tool"
    HASHCAT_LOGS="$PROJECT/evidence/logging/hashcat"
    SQLMAP_LOGS="$PROJECT/evidence/logging/hashcat"
    TPLMAP_LOGS="$PROJECT/evidence/logging/tplmap"
    if [ -d "$PROJECT" ] ; then
        __set_active_symlink ~/.john $JOHN_LOGS
        __set_active_symlink  ~/.local/share/hashcat $HASHCAT_LOGS
        __set_active_symlink  ~/.cme $CME_LOGS
        __set_active_symlink  ~/.local/share/sqlmap $SQLMAP_LOGS
        __set_active_symlink  ~/.jwt_tool $JWT_TOOL_LOGS
        __set_active_symlink  ~/.tplmap $TPLMAP_LOGS
    fi
}

function pentest-init(){
    PROJECT=${2:-$(pwd)}
    if [[ $# -ge 1 ]] ; then
        PROJECT="$PROJECT/$1"
    fi

    JOHN_LOGS="$PROJECT/evidence/logging/john"
    CME_LOGS="$PROJECT/evidence/logging/cme"
    JWT_TOOL_LOGS="$PROJECT/evidence/logging/jwt_tool"
    HASHCAT_LOGS="$PROJECT/evidence/logging/hashcat"
    SQLMAP_LOGS="$PROJECT/evidence/logging/hashcat"
    TPLMAP_LOGS="$PROJECT/evidence/logging/tplmap"
    mkdir -p $PROJECT/{admin,deliverables,evidence/{findings,scans/{vuln,service,web,ad},notes,osint,wireless,logging,misc},retest,utils}
    cp ~/documents/pentesting-write-up/box-template.tex $PROJECT/deliverables/$PROJECT_NAME.tex

    ln -s /usr/share/wordlists $PROJECT/utils/wordlists
    mkdir -p $JOHN_LOGS
    mkdir -p $HASHCAT_LOGS
    mkdir -p $CME_LOGS
    mkdir -p $SQLMAP_LOGS
    mkdir -p $JWT_TOOL_LOGS
    mkdir -p $TPLMAP_LOGS
    pentest-activate  $1 $2 
}

function pentest-close(){
    PROJECT=${2:-$(pwd)}
    if [[ $# -ge 1 ]] ; then
        PROJECT="$PROJECT/$1"
    fi


    JOHN_LOGS="$PROJECT/evidence/logging/john"
    CME_LOGS="$PROJECT/evidence/logging/cme"
    JWT_TOOL_LOGS="$PROJECT/evidence/logging/jwt_tool"
    HASHCAT_LOGS="$PROJECT/evidence/logging/hashcat"
    SQLMAP_LOGS="$PROJECT/evidence/logging/hashcat"
    TPLMAP_LOGS="$PROJECT/evidence/logging/tplmap"
    if [ -d "$PROJECT" ]; then
        __unset_active_symlink ~/.john $JOHN_LOGS
        __unset_active_symlink  ~/.local/share/hashcat $HASHCAT_LOGS
        __unset_active_symlink  ~/.cme $CME_LOGS
        __unset_active_symlink  ~/.local/share/sqlmap $SQLMAP_LOGS
        __unset_active_symlink  ~/.jwt_tool $JWT_TOOL_LOGS
        __unset_active_symlink  ~/.tplmap $TPLMAP_LOGS
        rm -f $PROJECT/utils/wordlists
        rm -rf  $PROJECT/{admin,deliverables,evidence,retest,utils}
    fi
}





